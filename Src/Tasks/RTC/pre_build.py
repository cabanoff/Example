# pre_build.py
import time
import sys

output_file = sys.argv[1] if len(sys.argv) > 1 else "build_timestamp.h"


local_time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())

# Local time and UTC time in seconds since the epoch
local_timestamp = time.mktime(time.localtime())
utc_timestamp = time.mktime(time.gmtime())

# Timezone offset in seconds
timezone_offset = int(local_timestamp - utc_timestamp)


header_content = f"""\
// build_timestamp.h

/*
This file is generated by python
Options->Build Actions -> Pre-build command line
python "$PROJ_DIR$\\build\\pre_build.py" "$PROJ_DIR$\\Inc\\build_timestamp.h"
Local time: {local_time_str}
*/

#pragma once

const uint32_t RtcTask::BUILD_TIMESTAMP = {timezone_offset + int(utc_timestamp)}UL;
const uint32_t RtcTask::UTC_TIMESTAMP = {int(utc_timestamp)}UL;
"""

with open(output_file, "w") as f:
    f.write(header_content)

print(f"Generated {output_file} with UTC timestamp:\
 {utc_timestamp} (Local: {local_time_str})")


print("local time in seconds:", timezone_offset + int(utc_timestamp))
print("UTC offset in seconds:", int(utc_timestamp))
print("Timezone offset in seconds:", timezone_offset)# pre_build.py
import time
import sys

output_file = sys.argv[1] if len(sys.argv) > 1 else "build_timestamp.h"


local_time_str = time.strftime("%Y-%m-%d %H:%M:%S", time.localtime())

# Local time and UTC time in seconds since the epoch
local_timestamp = time.mktime(time.localtime())
utc_timestamp = time.mktime(time.gmtime())

# Timezone offset in seconds
timezone_offset = int(local_timestamp - utc_timestamp)

time_check = timezone_offset*2 + int(utc_timestamp);


header_content = f"""\
// build_timestamp.h

/*
This file is generated by python
Options->Build Actions -> Pre-build command line
python "$PROJ_DIR$\\build\\pre_build.py" "$PROJ_DIR$\\Inc\\build_timestamp.h"
Local time: {local_time_str}
*/

#pragma once

const uint32_t RtcTask::BUILD_TIMESTAMP = {time_check}UL;
const uint32_t RtcTask::UTC_TIMESTAMP = {int(utc_timestamp)}UL;
"""

with open(output_file, "w") as f:
    f.write(header_content)

print(f"Generated {output_file} with UTC timestamp:\
 {utc_timestamp} (Local: {local_time_str})")


print("local time in seconds:", time_check)
print("UTC in seconds:", int(utc_timestamp))
print("Timezone offset in seconds:", timezone_offset)

print("Secunds:", time_check % 60)
time_check = time_check // 60
print("Minutes:", time_check % 60)  
time_check = time_check // 60
print("Hours:", time_check % 24)